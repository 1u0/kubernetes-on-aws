{{ if eq .Cluster.ConfigItems.karpenter_pools_enabled "true"}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: karpenter
  namespace: kube-system
  labels:
    application: kubernetes
    component: karpenter
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      deployment: karpenter
  template:
    metadata:
      labels:
        deployment: karpenter
        application: kubernetes
        component: karpenter
      annotations:
        logging/destination: "{{.Cluster.ConfigItems.log_destination_infra}}"
    spec:
      dnsConfig:
        options:
          - name: ndots
            value: "1"
      serviceAccountName: karpenter
      securityContext:
        fsGroup: 1000
      priorityClassName: "{{ .Cluster.ConfigItems.system_priority_class }}"
      tolerations:
      - key: node.kubernetes.io/role
        value: master
        effect: NoSchedule
      containers:
        - name: controller
          image: "container-registry.zalando.net/teapot/karpenter:v0.18.0-main-3"
          env:
            - name: CLUSTER_NAME
              value: {{ .Cluster.ID | awsValidID }}
            - name: CLUSTER_ENDPOINT
              value: "https://kubernetes.default.svc.cluster.local."
            - name: KARPENTER_SERVICE
              value: karpenter
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: controller
                  divisor: "0"
                  resource: limits.memory
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: http
              containerPort: 8081
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /readyz
              port: http
          resources:
            requests:
              cpu: "{{ .Cluster.ConfigItems.karpenter_controller_cpu }}"
              memory: "{{ .Cluster.ConfigItems.karpenter_controller_memory }}"
            limits:
              cpu: "{{ .Cluster.ConfigItems.karpenter_controller_cpu }}"
              memory: "{{ .Cluster.ConfigItems.karpenter_controller_memory }}"
        - name: webhook
          image: "public.ecr.aws/karpenter/webhook:v0.16.1@sha256:47860d69da18ada7567c6c6485ec8b79b270756fbf664f019d53a4375181fea7"
          env:
            - name: CLUSTER_NAME
              value: {{ .Cluster.ID | awsValidID }}
            - name: KUBERNETES_MIN_VERSION
              value: "1.19.0-0"
            - name: CLUSTER_ENDPOINT
              value: "https://kubernetes.default.svc.cluster.local."
            - name: KARPENTER_SERVICE
              value: karpenter
            - name: SYSTEM_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: MEMORY_LIMIT
              valueFrom:
                resourceFieldRef:
                  containerName: webhook
                  divisor: "0"
                  resource: limits.memory
          args:
            - -port=8443
          ports:
            - name: https-webhook
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            initialDelaySeconds: 30
            httpGet:
              port: https-webhook
              scheme: HTTPS
          readinessProbe:
            httpGet:
              port: https-webhook
              scheme: HTTPS
          resources:
            requests:
              cpu: "{{ .Cluster.ConfigItems.karpenter_webhook_cpu }}"
              memory: "{{ .Cluster.ConfigItems.karpenter_webhook_memory }}"
            limits:
              cpu: "{{ .Cluster.ConfigItems.karpenter_webhook_cpu }}"
              memory: "{{ .Cluster.ConfigItems.karpenter_webhook_memory }}"
{{ end }}
